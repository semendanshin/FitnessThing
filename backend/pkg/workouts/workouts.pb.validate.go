// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: workouts/workouts.proto

package workout

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Email

	// no validation rules for FirstName

	// no validation rules for LastName

	if all {
		switch v := interface{}(m.GetDateOfBirth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "DateOfBirth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "DateOfBirth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateOfBirth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "DateOfBirth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Height

	// no validation rules for Weight

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProfilePictureUrl

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on MuscleGroup with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MuscleGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MuscleGroup with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MuscleGroupMultiError, or
// nil if none found.
func (m *MuscleGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *MuscleGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return MuscleGroupMultiError(errors)
	}

	return nil
}

// MuscleGroupMultiError is an error wrapping multiple validation errors
// returned by MuscleGroup.ValidateAll() if the designated constraints aren't met.
type MuscleGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MuscleGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MuscleGroupMultiError) AllErrors() []error { return m }

// MuscleGroupValidationError is the validation error returned by
// MuscleGroup.Validate if the designated constraints aren't met.
type MuscleGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MuscleGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MuscleGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MuscleGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MuscleGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MuscleGroupValidationError) ErrorName() string { return "MuscleGroupValidationError" }

// Error satisfies the builtin error interface
func (e MuscleGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMuscleGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MuscleGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MuscleGroupValidationError{}

// Validate checks the field values on Exercise with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Exercise) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Exercise with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExerciseMultiError, or nil
// if none found.
func (m *Exercise) ValidateAll() error {
	return m.validate(true)
}

func (m *Exercise) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExerciseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExerciseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExerciseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for VideoUrl

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExerciseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExerciseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExerciseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExerciseMultiError(errors)
	}

	return nil
}

// ExerciseMultiError is an error wrapping multiple validation errors returned
// by Exercise.ValidateAll() if the designated constraints aren't met.
type ExerciseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExerciseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExerciseMultiError) AllErrors() []error { return m }

// ExerciseValidationError is the validation error returned by
// Exercise.Validate if the designated constraints aren't met.
type ExerciseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExerciseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExerciseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExerciseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExerciseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExerciseValidationError) ErrorName() string { return "ExerciseValidationError" }

// Error satisfies the builtin error interface
func (e ExerciseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExercise.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExerciseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExerciseValidationError{}

// Validate checks the field values on Routine with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Routine) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Routine with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RoutineMultiError, or nil if none found.
func (m *Routine) ValidateAll() error {
	return m.validate(true)
}

func (m *Routine) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoutineValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoutineValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoutineValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoutineValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoutineValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoutineValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RoutineMultiError(errors)
	}

	return nil
}

// RoutineMultiError is an error wrapping multiple validation errors returned
// by Routine.ValidateAll() if the designated constraints aren't met.
type RoutineMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoutineMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoutineMultiError) AllErrors() []error { return m }

// RoutineValidationError is the validation error returned by Routine.Validate
// if the designated constraints aren't met.
type RoutineValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoutineValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoutineValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoutineValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoutineValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoutineValidationError) ErrorName() string { return "RoutineValidationError" }

// Error satisfies the builtin error interface
func (e RoutineValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoutine.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoutineValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoutineValidationError{}

// Validate checks the field values on ExerciseInstance with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExerciseInstance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExerciseInstance with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExerciseInstanceMultiError, or nil if none found.
func (m *ExerciseInstance) ValidateAll() error {
	return m.validate(true)
}

func (m *ExerciseInstance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ExerciseId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExerciseInstanceValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExerciseInstanceValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExerciseInstanceValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RoutineId

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExerciseInstanceValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExerciseInstanceValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExerciseInstanceValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExerciseInstanceMultiError(errors)
	}

	return nil
}

// ExerciseInstanceMultiError is an error wrapping multiple validation errors
// returned by ExerciseInstance.ValidateAll() if the designated constraints
// aren't met.
type ExerciseInstanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExerciseInstanceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExerciseInstanceMultiError) AllErrors() []error { return m }

// ExerciseInstanceValidationError is the validation error returned by
// ExerciseInstance.Validate if the designated constraints aren't met.
type ExerciseInstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExerciseInstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExerciseInstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExerciseInstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExerciseInstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExerciseInstanceValidationError) ErrorName() string { return "ExerciseInstanceValidationError" }

// Error satisfies the builtin error interface
func (e ExerciseInstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExerciseInstance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExerciseInstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExerciseInstanceValidationError{}

// Validate checks the field values on Set with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Set) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Set with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SetMultiError, or nil if none found.
func (m *Set) ValidateAll() error {
	return m.validate(true)
}

func (m *Set) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ExerciseInstanceId

	// no validation rules for SetType

	if m.GetReps() <= 0 {
		err := SetValidationError{
			field:  "Reps",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWeight() <= 0 {
		err := SetValidationError{
			field:  "Weight",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetMultiError(errors)
	}

	return nil
}

// SetMultiError is an error wrapping multiple validation errors returned by
// Set.ValidateAll() if the designated constraints aren't met.
type SetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetMultiError) AllErrors() []error { return m }

// SetValidationError is the validation error returned by Set.Validate if the
// designated constraints aren't met.
type SetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetValidationError) ErrorName() string { return "SetValidationError" }

// Error satisfies the builtin error interface
func (e SetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetValidationError{}

// Validate checks the field values on Workout with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Workout) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Workout with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in WorkoutMultiError, or nil if none found.
func (m *Workout) ValidateAll() error {
	return m.validate(true)
}

func (m *Workout) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkoutValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkoutValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkoutValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	// no validation rules for Notes

	// no validation rules for Rating

	if all {
		switch v := interface{}(m.GetFinishedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkoutValidationError{
					field:  "FinishedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkoutValidationError{
					field:  "FinishedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFinishedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkoutValidationError{
				field:  "FinishedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkoutValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkoutValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkoutValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.RoutineId != nil {
		// no validation rules for RoutineId
	}

	if len(errors) > 0 {
		return WorkoutMultiError(errors)
	}

	return nil
}

// WorkoutMultiError is an error wrapping multiple validation errors returned
// by Workout.ValidateAll() if the designated constraints aren't met.
type WorkoutMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkoutMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkoutMultiError) AllErrors() []error { return m }

// WorkoutValidationError is the validation error returned by Workout.Validate
// if the designated constraints aren't met.
type WorkoutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkoutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkoutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkoutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkoutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkoutValidationError) ErrorName() string { return "WorkoutValidationError" }

// Error satisfies the builtin error interface
func (e WorkoutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkout.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkoutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkoutValidationError{}

// Validate checks the field values on ExerciseLog with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExerciseLog) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExerciseLog with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExerciseLogMultiError, or
// nil if none found.
func (m *ExerciseLog) ValidateAll() error {
	return m.validate(true)
}

func (m *ExerciseLog) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExerciseLogValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExerciseLogValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExerciseLogValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WorkoutId

	// no validation rules for ExerciseId

	// no validation rules for Notes

	// no validation rules for PowerRating

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExerciseLogValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExerciseLogValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExerciseLogValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExerciseLogMultiError(errors)
	}

	return nil
}

// ExerciseLogMultiError is an error wrapping multiple validation errors
// returned by ExerciseLog.ValidateAll() if the designated constraints aren't met.
type ExerciseLogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExerciseLogMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExerciseLogMultiError) AllErrors() []error { return m }

// ExerciseLogValidationError is the validation error returned by
// ExerciseLog.Validate if the designated constraints aren't met.
type ExerciseLogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExerciseLogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExerciseLogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExerciseLogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExerciseLogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExerciseLogValidationError) ErrorName() string { return "ExerciseLogValidationError" }

// Error satisfies the builtin error interface
func (e ExerciseLogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExerciseLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExerciseLogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExerciseLogValidationError{}

// Validate checks the field values on ExpectedSet with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExpectedSet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExpectedSet with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExpectedSetMultiError, or
// nil if none found.
func (m *ExpectedSet) ValidateAll() error {
	return m.validate(true)
}

func (m *ExpectedSet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ExerciseLogId

	// no validation rules for Reps

	// no validation rules for Weight

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExpectedSetValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExpectedSetValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExpectedSetValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExpectedSetValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExpectedSetValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExpectedSetValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExpectedSetValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExpectedSetValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExpectedSetValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExpectedSetMultiError(errors)
	}

	return nil
}

// ExpectedSetMultiError is an error wrapping multiple validation errors
// returned by ExpectedSet.ValidateAll() if the designated constraints aren't met.
type ExpectedSetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpectedSetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpectedSetMultiError) AllErrors() []error { return m }

// ExpectedSetValidationError is the validation error returned by
// ExpectedSet.Validate if the designated constraints aren't met.
type ExpectedSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpectedSetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpectedSetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpectedSetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpectedSetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpectedSetValidationError) ErrorName() string { return "ExpectedSetValidationError" }

// Error satisfies the builtin error interface
func (e ExpectedSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpectedSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpectedSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpectedSetValidationError{}

// Validate checks the field values on SetLog with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetLog) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetLog with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SetLogMultiError, or nil if none found.
func (m *SetLog) ValidateAll() error {
	return m.validate(true)
}

func (m *SetLog) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetLogValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetLogValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetLogValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ExerciseLogId

	// no validation rules for Reps

	// no validation rules for Weight

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetLogValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetLogValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetLogValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetLogValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetLogValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetLogValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetLogMultiError(errors)
	}

	return nil
}

// SetLogMultiError is an error wrapping multiple validation errors returned by
// SetLog.ValidateAll() if the designated constraints aren't met.
type SetLogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetLogMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetLogMultiError) AllErrors() []error { return m }

// SetLogValidationError is the validation error returned by SetLog.Validate if
// the designated constraints aren't met.
type SetLogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetLogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetLogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetLogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetLogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetLogValidationError) ErrorName() string { return "SetLogValidationError" }

// Error satisfies the builtin error interface
func (e SetLogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetLogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetLogValidationError{}

// Validate checks the field values on GetExercisesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetExercisesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExercisesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetExercisesRequestMultiError, or nil if none found.
func (m *GetExercisesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExercisesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetExercisesRequestMultiError(errors)
	}

	return nil
}

// GetExercisesRequestMultiError is an error wrapping multiple validation
// errors returned by GetExercisesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetExercisesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExercisesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExercisesRequestMultiError) AllErrors() []error { return m }

// GetExercisesRequestValidationError is the validation error returned by
// GetExercisesRequest.Validate if the designated constraints aren't met.
type GetExercisesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExercisesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExercisesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExercisesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExercisesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExercisesRequestValidationError) ErrorName() string {
	return "GetExercisesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetExercisesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExercisesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExercisesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExercisesRequestValidationError{}

// Validate checks the field values on GetExercisesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetExercisesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExercisesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetExercisesResponseMultiError, or nil if none found.
func (m *GetExercisesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExercisesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetExercises() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetExercisesResponseValidationError{
						field:  fmt.Sprintf("Exercises[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetExercisesResponseValidationError{
						field:  fmt.Sprintf("Exercises[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetExercisesResponseValidationError{
					field:  fmt.Sprintf("Exercises[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetExercisesResponseMultiError(errors)
	}

	return nil
}

// GetExercisesResponseMultiError is an error wrapping multiple validation
// errors returned by GetExercisesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetExercisesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExercisesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExercisesResponseMultiError) AllErrors() []error { return m }

// GetExercisesResponseValidationError is the validation error returned by
// GetExercisesResponse.Validate if the designated constraints aren't met.
type GetExercisesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExercisesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExercisesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExercisesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExercisesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExercisesResponseValidationError) ErrorName() string {
	return "GetExercisesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetExercisesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExercisesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExercisesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExercisesResponseValidationError{}

// Validate checks the field values on GetExerciseAlternativesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetExerciseAlternativesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExerciseAlternativesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetExerciseAlternativesRequestMultiError, or nil if none found.
func (m *GetExerciseAlternativesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExerciseAlternativesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExerciseId

	if len(errors) > 0 {
		return GetExerciseAlternativesRequestMultiError(errors)
	}

	return nil
}

// GetExerciseAlternativesRequestMultiError is an error wrapping multiple
// validation errors returned by GetExerciseAlternativesRequest.ValidateAll()
// if the designated constraints aren't met.
type GetExerciseAlternativesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExerciseAlternativesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExerciseAlternativesRequestMultiError) AllErrors() []error { return m }

// GetExerciseAlternativesRequestValidationError is the validation error
// returned by GetExerciseAlternativesRequest.Validate if the designated
// constraints aren't met.
type GetExerciseAlternativesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExerciseAlternativesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExerciseAlternativesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExerciseAlternativesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExerciseAlternativesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExerciseAlternativesRequestValidationError) ErrorName() string {
	return "GetExerciseAlternativesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetExerciseAlternativesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExerciseAlternativesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExerciseAlternativesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExerciseAlternativesRequestValidationError{}

// Validate checks the field values on GetExerciseAlternativesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetExerciseAlternativesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExerciseAlternativesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetExerciseAlternativesResponseMultiError, or nil if none found.
func (m *GetExerciseAlternativesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExerciseAlternativesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAlternatives() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetExerciseAlternativesResponseValidationError{
						field:  fmt.Sprintf("Alternatives[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetExerciseAlternativesResponseValidationError{
						field:  fmt.Sprintf("Alternatives[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetExerciseAlternativesResponseValidationError{
					field:  fmt.Sprintf("Alternatives[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetExerciseAlternativesResponseMultiError(errors)
	}

	return nil
}

// GetExerciseAlternativesResponseMultiError is an error wrapping multiple
// validation errors returned by GetExerciseAlternativesResponse.ValidateAll()
// if the designated constraints aren't met.
type GetExerciseAlternativesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExerciseAlternativesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExerciseAlternativesResponseMultiError) AllErrors() []error { return m }

// GetExerciseAlternativesResponseValidationError is the validation error
// returned by GetExerciseAlternativesResponse.Validate if the designated
// constraints aren't met.
type GetExerciseAlternativesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExerciseAlternativesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExerciseAlternativesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExerciseAlternativesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExerciseAlternativesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExerciseAlternativesResponseValidationError) ErrorName() string {
	return "GetExerciseAlternativesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetExerciseAlternativesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExerciseAlternativesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExerciseAlternativesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExerciseAlternativesResponseValidationError{}

// Validate checks the field values on GetExerciseDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetExerciseDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExerciseDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetExerciseDetailRequestMultiError, or nil if none found.
func (m *GetExerciseDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExerciseDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExerciseId

	if len(errors) > 0 {
		return GetExerciseDetailRequestMultiError(errors)
	}

	return nil
}

// GetExerciseDetailRequestMultiError is an error wrapping multiple validation
// errors returned by GetExerciseDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type GetExerciseDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExerciseDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExerciseDetailRequestMultiError) AllErrors() []error { return m }

// GetExerciseDetailRequestValidationError is the validation error returned by
// GetExerciseDetailRequest.Validate if the designated constraints aren't met.
type GetExerciseDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExerciseDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExerciseDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExerciseDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExerciseDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExerciseDetailRequestValidationError) ErrorName() string {
	return "GetExerciseDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetExerciseDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExerciseDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExerciseDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExerciseDetailRequestValidationError{}

// Validate checks the field values on ExerciseResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExerciseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExerciseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExerciseResponseMultiError, or nil if none found.
func (m *ExerciseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExerciseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExercise()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExerciseResponseValidationError{
					field:  "Exercise",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExerciseResponseValidationError{
					field:  "Exercise",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExercise()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExerciseResponseValidationError{
				field:  "Exercise",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExerciseResponseMultiError(errors)
	}

	return nil
}

// ExerciseResponseMultiError is an error wrapping multiple validation errors
// returned by ExerciseResponse.ValidateAll() if the designated constraints
// aren't met.
type ExerciseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExerciseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExerciseResponseMultiError) AllErrors() []error { return m }

// ExerciseResponseValidationError is the validation error returned by
// ExerciseResponse.Validate if the designated constraints aren't met.
type ExerciseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExerciseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExerciseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExerciseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExerciseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExerciseResponseValidationError) ErrorName() string { return "ExerciseResponseValidationError" }

// Error satisfies the builtin error interface
func (e ExerciseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExerciseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExerciseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExerciseResponseValidationError{}

// Validate checks the field values on CreateExerciseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateExerciseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateExerciseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateExerciseRequestMultiError, or nil if none found.
func (m *CreateExerciseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateExerciseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.VideoUrl != nil {
		// no validation rules for VideoUrl
	}

	if len(errors) > 0 {
		return CreateExerciseRequestMultiError(errors)
	}

	return nil
}

// CreateExerciseRequestMultiError is an error wrapping multiple validation
// errors returned by CreateExerciseRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateExerciseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateExerciseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateExerciseRequestMultiError) AllErrors() []error { return m }

// CreateExerciseRequestValidationError is the validation error returned by
// CreateExerciseRequest.Validate if the designated constraints aren't met.
type CreateExerciseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateExerciseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateExerciseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateExerciseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateExerciseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateExerciseRequestValidationError) ErrorName() string {
	return "CreateExerciseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateExerciseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateExerciseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateExerciseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateExerciseRequestValidationError{}

// Validate checks the field values on GetMuscleGroupsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMuscleGroupsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMuscleGroupsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMuscleGroupsResponseMultiError, or nil if none found.
func (m *GetMuscleGroupsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMuscleGroupsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMuscleGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMuscleGroupsResponseValidationError{
						field:  fmt.Sprintf("MuscleGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMuscleGroupsResponseValidationError{
						field:  fmt.Sprintf("MuscleGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMuscleGroupsResponseValidationError{
					field:  fmt.Sprintf("MuscleGroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMuscleGroupsResponseMultiError(errors)
	}

	return nil
}

// GetMuscleGroupsResponseMultiError is an error wrapping multiple validation
// errors returned by GetMuscleGroupsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetMuscleGroupsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMuscleGroupsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMuscleGroupsResponseMultiError) AllErrors() []error { return m }

// GetMuscleGroupsResponseValidationError is the validation error returned by
// GetMuscleGroupsResponse.Validate if the designated constraints aren't met.
type GetMuscleGroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMuscleGroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMuscleGroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMuscleGroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMuscleGroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMuscleGroupsResponseValidationError) ErrorName() string {
	return "GetMuscleGroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMuscleGroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMuscleGroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMuscleGroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMuscleGroupsResponseValidationError{}

// Validate checks the field values on GetExerciseHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetExerciseHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExerciseHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetExerciseHistoryRequestMultiError, or nil if none found.
func (m *GetExerciseHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExerciseHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExerciseId

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetExerciseHistoryRequestMultiError(errors)
	}

	return nil
}

// GetExerciseHistoryRequestMultiError is an error wrapping multiple validation
// errors returned by GetExerciseHistoryRequest.ValidateAll() if the
// designated constraints aren't met.
type GetExerciseHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExerciseHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExerciseHistoryRequestMultiError) AllErrors() []error { return m }

// GetExerciseHistoryRequestValidationError is the validation error returned by
// GetExerciseHistoryRequest.Validate if the designated constraints aren't met.
type GetExerciseHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExerciseHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExerciseHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExerciseHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExerciseHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExerciseHistoryRequestValidationError) ErrorName() string {
	return "GetExerciseHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetExerciseHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExerciseHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExerciseHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExerciseHistoryRequestValidationError{}

// Validate checks the field values on ExerciseHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExerciseHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExerciseHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExerciseHistoryResponseMultiError, or nil if none found.
func (m *ExerciseHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExerciseHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetExerciseLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExerciseHistoryResponseValidationError{
						field:  fmt.Sprintf("ExerciseLogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExerciseHistoryResponseValidationError{
						field:  fmt.Sprintf("ExerciseLogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExerciseHistoryResponseValidationError{
					field:  fmt.Sprintf("ExerciseLogs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ExerciseHistoryResponseMultiError(errors)
	}

	return nil
}

// ExerciseHistoryResponseMultiError is an error wrapping multiple validation
// errors returned by ExerciseHistoryResponse.ValidateAll() if the designated
// constraints aren't met.
type ExerciseHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExerciseHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExerciseHistoryResponseMultiError) AllErrors() []error { return m }

// ExerciseHistoryResponseValidationError is the validation error returned by
// ExerciseHistoryResponse.Validate if the designated constraints aren't met.
type ExerciseHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExerciseHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExerciseHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExerciseHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExerciseHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExerciseHistoryResponseValidationError) ErrorName() string {
	return "ExerciseHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExerciseHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExerciseHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExerciseHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExerciseHistoryResponseValidationError{}

// Validate checks the field values on RoutineListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoutineListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoutineListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoutineListResponseMultiError, or nil if none found.
func (m *RoutineListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RoutineListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoutines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoutineListResponseValidationError{
						field:  fmt.Sprintf("Routines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoutineListResponseValidationError{
						field:  fmt.Sprintf("Routines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoutineListResponseValidationError{
					field:  fmt.Sprintf("Routines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RoutineListResponseMultiError(errors)
	}

	return nil
}

// RoutineListResponseMultiError is an error wrapping multiple validation
// errors returned by RoutineListResponse.ValidateAll() if the designated
// constraints aren't met.
type RoutineListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoutineListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoutineListResponseMultiError) AllErrors() []error { return m }

// RoutineListResponseValidationError is the validation error returned by
// RoutineListResponse.Validate if the designated constraints aren't met.
type RoutineListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoutineListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoutineListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoutineListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoutineListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoutineListResponseValidationError) ErrorName() string {
	return "RoutineListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RoutineListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoutineListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoutineListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoutineListResponseValidationError{}

// Validate checks the field values on CreateRoutineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoutineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoutineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoutineRequestMultiError, or nil if none found.
func (m *CreateRoutineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoutineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	if m.WorkoutId != nil {
		// no validation rules for WorkoutId
	}

	if len(errors) > 0 {
		return CreateRoutineRequestMultiError(errors)
	}

	return nil
}

// CreateRoutineRequestMultiError is an error wrapping multiple validation
// errors returned by CreateRoutineRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateRoutineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoutineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoutineRequestMultiError) AllErrors() []error { return m }

// CreateRoutineRequestValidationError is the validation error returned by
// CreateRoutineRequest.Validate if the designated constraints aren't met.
type CreateRoutineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoutineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoutineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoutineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoutineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoutineRequestValidationError) ErrorName() string {
	return "CreateRoutineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoutineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoutineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoutineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoutineRequestValidationError{}

// Validate checks the field values on RoutineResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoutineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoutineResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoutineResponseMultiError, or nil if none found.
func (m *RoutineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RoutineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoutine()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoutineResponseValidationError{
					field:  "Routine",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoutineResponseValidationError{
					field:  "Routine",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoutine()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoutineResponseValidationError{
				field:  "Routine",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RoutineResponseMultiError(errors)
	}

	return nil
}

// RoutineResponseMultiError is an error wrapping multiple validation errors
// returned by RoutineResponse.ValidateAll() if the designated constraints
// aren't met.
type RoutineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoutineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoutineResponseMultiError) AllErrors() []error { return m }

// RoutineResponseValidationError is the validation error returned by
// RoutineResponse.Validate if the designated constraints aren't met.
type RoutineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoutineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoutineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoutineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoutineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoutineResponseValidationError) ErrorName() string { return "RoutineResponseValidationError" }

// Error satisfies the builtin error interface
func (e RoutineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoutineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoutineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoutineResponseValidationError{}

// Validate checks the field values on UpdateRoutineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoutineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoutineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoutineRequestMultiError, or nil if none found.
func (m *UpdateRoutineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoutineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoutineId

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return UpdateRoutineRequestMultiError(errors)
	}

	return nil
}

// UpdateRoutineRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateRoutineRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateRoutineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoutineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoutineRequestMultiError) AllErrors() []error { return m }

// UpdateRoutineRequestValidationError is the validation error returned by
// UpdateRoutineRequest.Validate if the designated constraints aren't met.
type UpdateRoutineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoutineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoutineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoutineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoutineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoutineRequestValidationError) ErrorName() string {
	return "UpdateRoutineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoutineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoutineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoutineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoutineRequestValidationError{}

// Validate checks the field values on GetRoutineDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRoutineDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoutineDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoutineDetailRequestMultiError, or nil if none found.
func (m *GetRoutineDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoutineDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoutineId

	if len(errors) > 0 {
		return GetRoutineDetailRequestMultiError(errors)
	}

	return nil
}

// GetRoutineDetailRequestMultiError is an error wrapping multiple validation
// errors returned by GetRoutineDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type GetRoutineDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoutineDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoutineDetailRequestMultiError) AllErrors() []error { return m }

// GetRoutineDetailRequestValidationError is the validation error returned by
// GetRoutineDetailRequest.Validate if the designated constraints aren't met.
type GetRoutineDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoutineDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoutineDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoutineDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoutineDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoutineDetailRequestValidationError) ErrorName() string {
	return "GetRoutineDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoutineDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoutineDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoutineDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoutineDetailRequestValidationError{}

// Validate checks the field values on ExerciseInstanceDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExerciseInstanceDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExerciseInstanceDetails with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExerciseInstanceDetailsMultiError, or nil if none found.
func (m *ExerciseInstanceDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *ExerciseInstanceDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExerciseInstance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExerciseInstanceDetailsValidationError{
					field:  "ExerciseInstance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExerciseInstanceDetailsValidationError{
					field:  "ExerciseInstance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExerciseInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExerciseInstanceDetailsValidationError{
				field:  "ExerciseInstance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExercise()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExerciseInstanceDetailsValidationError{
					field:  "Exercise",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExerciseInstanceDetailsValidationError{
					field:  "Exercise",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExercise()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExerciseInstanceDetailsValidationError{
				field:  "Exercise",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExerciseInstanceDetailsValidationError{
						field:  fmt.Sprintf("Sets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExerciseInstanceDetailsValidationError{
						field:  fmt.Sprintf("Sets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExerciseInstanceDetailsValidationError{
					field:  fmt.Sprintf("Sets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ExerciseInstanceDetailsMultiError(errors)
	}

	return nil
}

// ExerciseInstanceDetailsMultiError is an error wrapping multiple validation
// errors returned by ExerciseInstanceDetails.ValidateAll() if the designated
// constraints aren't met.
type ExerciseInstanceDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExerciseInstanceDetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExerciseInstanceDetailsMultiError) AllErrors() []error { return m }

// ExerciseInstanceDetailsValidationError is the validation error returned by
// ExerciseInstanceDetails.Validate if the designated constraints aren't met.
type ExerciseInstanceDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExerciseInstanceDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExerciseInstanceDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExerciseInstanceDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExerciseInstanceDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExerciseInstanceDetailsValidationError) ErrorName() string {
	return "ExerciseInstanceDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e ExerciseInstanceDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExerciseInstanceDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExerciseInstanceDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExerciseInstanceDetailsValidationError{}

// Validate checks the field values on RoutineDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoutineDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoutineDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoutineDetailResponseMultiError, or nil if none found.
func (m *RoutineDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RoutineDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoutine()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoutineDetailResponseValidationError{
					field:  "Routine",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoutineDetailResponseValidationError{
					field:  "Routine",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoutine()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoutineDetailResponseValidationError{
				field:  "Routine",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetExerciseInstances() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoutineDetailResponseValidationError{
						field:  fmt.Sprintf("ExerciseInstances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoutineDetailResponseValidationError{
						field:  fmt.Sprintf("ExerciseInstances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoutineDetailResponseValidationError{
					field:  fmt.Sprintf("ExerciseInstances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RoutineDetailResponseMultiError(errors)
	}

	return nil
}

// RoutineDetailResponseMultiError is an error wrapping multiple validation
// errors returned by RoutineDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type RoutineDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoutineDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoutineDetailResponseMultiError) AllErrors() []error { return m }

// RoutineDetailResponseValidationError is the validation error returned by
// RoutineDetailResponse.Validate if the designated constraints aren't met.
type RoutineDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoutineDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoutineDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoutineDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoutineDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoutineDetailResponseValidationError) ErrorName() string {
	return "RoutineDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RoutineDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoutineDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoutineDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoutineDetailResponseValidationError{}

// Validate checks the field values on ExerciseInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExerciseInstanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExerciseInstanceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExerciseInstanceResponseMultiError, or nil if none found.
func (m *ExerciseInstanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExerciseInstanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExerciseInstance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExerciseInstanceResponseValidationError{
					field:  "ExerciseInstance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExerciseInstanceResponseValidationError{
					field:  "ExerciseInstance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExerciseInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExerciseInstanceResponseValidationError{
				field:  "ExerciseInstance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExerciseInstanceResponseMultiError(errors)
	}

	return nil
}

// ExerciseInstanceResponseMultiError is an error wrapping multiple validation
// errors returned by ExerciseInstanceResponse.ValidateAll() if the designated
// constraints aren't met.
type ExerciseInstanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExerciseInstanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExerciseInstanceResponseMultiError) AllErrors() []error { return m }

// ExerciseInstanceResponseValidationError is the validation error returned by
// ExerciseInstanceResponse.Validate if the designated constraints aren't met.
type ExerciseInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExerciseInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExerciseInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExerciseInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExerciseInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExerciseInstanceResponseValidationError) ErrorName() string {
	return "ExerciseInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExerciseInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExerciseInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExerciseInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExerciseInstanceResponseValidationError{}

// Validate checks the field values on RoutineInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoutineInstanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoutineInstanceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoutineInstanceResponseMultiError, or nil if none found.
func (m *RoutineInstanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RoutineInstanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExerciseInstance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoutineInstanceResponseValidationError{
					field:  "ExerciseInstance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoutineInstanceResponseValidationError{
					field:  "ExerciseInstance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExerciseInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoutineInstanceResponseValidationError{
				field:  "ExerciseInstance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RoutineInstanceResponseMultiError(errors)
	}

	return nil
}

// RoutineInstanceResponseMultiError is an error wrapping multiple validation
// errors returned by RoutineInstanceResponse.ValidateAll() if the designated
// constraints aren't met.
type RoutineInstanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoutineInstanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoutineInstanceResponseMultiError) AllErrors() []error { return m }

// RoutineInstanceResponseValidationError is the validation error returned by
// RoutineInstanceResponse.Validate if the designated constraints aren't met.
type RoutineInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoutineInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoutineInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoutineInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoutineInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoutineInstanceResponseValidationError) ErrorName() string {
	return "RoutineInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RoutineInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoutineInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoutineInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoutineInstanceResponseValidationError{}

// Validate checks the field values on AddExerciseToRoutineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddExerciseToRoutineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddExerciseToRoutineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddExerciseToRoutineRequestMultiError, or nil if none found.
func (m *AddExerciseToRoutineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddExerciseToRoutineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoutineId

	// no validation rules for ExerciseId

	if len(errors) > 0 {
		return AddExerciseToRoutineRequestMultiError(errors)
	}

	return nil
}

// AddExerciseToRoutineRequestMultiError is an error wrapping multiple
// validation errors returned by AddExerciseToRoutineRequest.ValidateAll() if
// the designated constraints aren't met.
type AddExerciseToRoutineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddExerciseToRoutineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddExerciseToRoutineRequestMultiError) AllErrors() []error { return m }

// AddExerciseToRoutineRequestValidationError is the validation error returned
// by AddExerciseToRoutineRequest.Validate if the designated constraints
// aren't met.
type AddExerciseToRoutineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddExerciseToRoutineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddExerciseToRoutineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddExerciseToRoutineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddExerciseToRoutineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddExerciseToRoutineRequestValidationError) ErrorName() string {
	return "AddExerciseToRoutineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddExerciseToRoutineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddExerciseToRoutineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddExerciseToRoutineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddExerciseToRoutineRequestValidationError{}

// Validate checks the field values on DeleteRoutineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoutineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoutineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoutineRequestMultiError, or nil if none found.
func (m *DeleteRoutineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoutineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoutineId

	if len(errors) > 0 {
		return DeleteRoutineRequestMultiError(errors)
	}

	return nil
}

// DeleteRoutineRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteRoutineRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteRoutineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoutineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoutineRequestMultiError) AllErrors() []error { return m }

// DeleteRoutineRequestValidationError is the validation error returned by
// DeleteRoutineRequest.Validate if the designated constraints aren't met.
type DeleteRoutineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoutineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoutineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoutineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoutineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoutineRequestValidationError) ErrorName() string {
	return "DeleteRoutineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoutineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoutineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoutineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoutineRequestValidationError{}

// Validate checks the field values on GetExerciseInstanceDetailsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetExerciseInstanceDetailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExerciseInstanceDetailsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetExerciseInstanceDetailsRequestMultiError, or nil if none found.
func (m *GetExerciseInstanceDetailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExerciseInstanceDetailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoutineId

	// no validation rules for ExerciseInstanceId

	if len(errors) > 0 {
		return GetExerciseInstanceDetailsRequestMultiError(errors)
	}

	return nil
}

// GetExerciseInstanceDetailsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetExerciseInstanceDetailsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetExerciseInstanceDetailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExerciseInstanceDetailsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExerciseInstanceDetailsRequestMultiError) AllErrors() []error { return m }

// GetExerciseInstanceDetailsRequestValidationError is the validation error
// returned by GetExerciseInstanceDetailsRequest.Validate if the designated
// constraints aren't met.
type GetExerciseInstanceDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExerciseInstanceDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExerciseInstanceDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExerciseInstanceDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExerciseInstanceDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExerciseInstanceDetailsRequestValidationError) ErrorName() string {
	return "GetExerciseInstanceDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetExerciseInstanceDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExerciseInstanceDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExerciseInstanceDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExerciseInstanceDetailsRequestValidationError{}

// Validate checks the field values on GetExerciseInstanceDetailsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetExerciseInstanceDetailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExerciseInstanceDetailsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetExerciseInstanceDetailsResponseMultiError, or nil if none found.
func (m *GetExerciseInstanceDetailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExerciseInstanceDetailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExerciseInstanceDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetExerciseInstanceDetailsResponseValidationError{
					field:  "ExerciseInstanceDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetExerciseInstanceDetailsResponseValidationError{
					field:  "ExerciseInstanceDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExerciseInstanceDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetExerciseInstanceDetailsResponseValidationError{
				field:  "ExerciseInstanceDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetExerciseInstanceDetailsResponseMultiError(errors)
	}

	return nil
}

// GetExerciseInstanceDetailsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetExerciseInstanceDetailsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetExerciseInstanceDetailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExerciseInstanceDetailsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExerciseInstanceDetailsResponseMultiError) AllErrors() []error { return m }

// GetExerciseInstanceDetailsResponseValidationError is the validation error
// returned by GetExerciseInstanceDetailsResponse.Validate if the designated
// constraints aren't met.
type GetExerciseInstanceDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExerciseInstanceDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExerciseInstanceDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExerciseInstanceDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExerciseInstanceDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExerciseInstanceDetailsResponseValidationError) ErrorName() string {
	return "GetExerciseInstanceDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetExerciseInstanceDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExerciseInstanceDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExerciseInstanceDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExerciseInstanceDetailsResponseValidationError{}

// Validate checks the field values on RemoveExerciseInstanceFromRoutineRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RemoveExerciseInstanceFromRoutineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RemoveExerciseInstanceFromRoutineRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RemoveExerciseInstanceFromRoutineRequestMultiError, or nil if none found.
func (m *RemoveExerciseInstanceFromRoutineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveExerciseInstanceFromRoutineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoutineId

	// no validation rules for ExerciseInstanceId

	if len(errors) > 0 {
		return RemoveExerciseInstanceFromRoutineRequestMultiError(errors)
	}

	return nil
}

// RemoveExerciseInstanceFromRoutineRequestMultiError is an error wrapping
// multiple validation errors returned by
// RemoveExerciseInstanceFromRoutineRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveExerciseInstanceFromRoutineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveExerciseInstanceFromRoutineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveExerciseInstanceFromRoutineRequestMultiError) AllErrors() []error { return m }

// RemoveExerciseInstanceFromRoutineRequestValidationError is the validation
// error returned by RemoveExerciseInstanceFromRoutineRequest.Validate if the
// designated constraints aren't met.
type RemoveExerciseInstanceFromRoutineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveExerciseInstanceFromRoutineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveExerciseInstanceFromRoutineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveExerciseInstanceFromRoutineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveExerciseInstanceFromRoutineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveExerciseInstanceFromRoutineRequestValidationError) ErrorName() string {
	return "RemoveExerciseInstanceFromRoutineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveExerciseInstanceFromRoutineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveExerciseInstanceFromRoutineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveExerciseInstanceFromRoutineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveExerciseInstanceFromRoutineRequestValidationError{}

// Validate checks the field values on UpdateExerciseInstanceInRoutineRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateExerciseInstanceInRoutineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateExerciseInstanceInRoutineRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdateExerciseInstanceInRoutineRequestMultiError, or nil if none found.
func (m *UpdateExerciseInstanceInRoutineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateExerciseInstanceInRoutineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoutineId

	// no validation rules for ExerciseInstanceId

	// no validation rules for SetType

	if m.GetReps() <= 0 {
		err := UpdateExerciseInstanceInRoutineRequestValidationError{
			field:  "Reps",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWeight() <= 0 {
		err := UpdateExerciseInstanceInRoutineRequestValidationError{
			field:  "Weight",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateExerciseInstanceInRoutineRequestValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateExerciseInstanceInRoutineRequestValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateExerciseInstanceInRoutineRequestValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateExerciseInstanceInRoutineRequestMultiError(errors)
	}

	return nil
}

// UpdateExerciseInstanceInRoutineRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateExerciseInstanceInRoutineRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateExerciseInstanceInRoutineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateExerciseInstanceInRoutineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateExerciseInstanceInRoutineRequestMultiError) AllErrors() []error { return m }

// UpdateExerciseInstanceInRoutineRequestValidationError is the validation
// error returned by UpdateExerciseInstanceInRoutineRequest.Validate if the
// designated constraints aren't met.
type UpdateExerciseInstanceInRoutineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateExerciseInstanceInRoutineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateExerciseInstanceInRoutineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateExerciseInstanceInRoutineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateExerciseInstanceInRoutineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateExerciseInstanceInRoutineRequestValidationError) ErrorName() string {
	return "UpdateExerciseInstanceInRoutineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateExerciseInstanceInRoutineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateExerciseInstanceInRoutineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateExerciseInstanceInRoutineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateExerciseInstanceInRoutineRequestValidationError{}

// Validate checks the field values on AddSetToExerciseInstanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddSetToExerciseInstanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddSetToExerciseInstanceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddSetToExerciseInstanceRequestMultiError, or nil if none found.
func (m *AddSetToExerciseInstanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddSetToExerciseInstanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoutineId

	// no validation rules for ExerciseInstanceId

	// no validation rules for SetType

	if m.GetReps() <= 0 {
		err := AddSetToExerciseInstanceRequestValidationError{
			field:  "Reps",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWeight() < 0 {
		err := AddSetToExerciseInstanceRequestValidationError{
			field:  "Weight",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddSetToExerciseInstanceRequestValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddSetToExerciseInstanceRequestValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddSetToExerciseInstanceRequestValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddSetToExerciseInstanceRequestMultiError(errors)
	}

	return nil
}

// AddSetToExerciseInstanceRequestMultiError is an error wrapping multiple
// validation errors returned by AddSetToExerciseInstanceRequest.ValidateAll()
// if the designated constraints aren't met.
type AddSetToExerciseInstanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddSetToExerciseInstanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddSetToExerciseInstanceRequestMultiError) AllErrors() []error { return m }

// AddSetToExerciseInstanceRequestValidationError is the validation error
// returned by AddSetToExerciseInstanceRequest.Validate if the designated
// constraints aren't met.
type AddSetToExerciseInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSetToExerciseInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSetToExerciseInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSetToExerciseInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSetToExerciseInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSetToExerciseInstanceRequestValidationError) ErrorName() string {
	return "AddSetToExerciseInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddSetToExerciseInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSetToExerciseInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSetToExerciseInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSetToExerciseInstanceRequestValidationError{}

// Validate checks the field values on UpdateSetInExerciseInstanceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateSetInExerciseInstanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSetInExerciseInstanceRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateSetInExerciseInstanceRequestMultiError, or nil if none found.
func (m *UpdateSetInExerciseInstanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSetInExerciseInstanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoutineId

	// no validation rules for ExerciseInstanceId

	// no validation rules for SetId

	if m.SetType != nil {
		// no validation rules for SetType
	}

	if m.Reps != nil {

		if m.GetReps() <= 0 {
			err := UpdateSetInExerciseInstanceRequestValidationError{
				field:  "Reps",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Weight != nil {

		if m.GetWeight() < 0 {
			err := UpdateSetInExerciseInstanceRequestValidationError{
				field:  "Weight",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Time != nil {

		if all {
			switch v := interface{}(m.GetTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateSetInExerciseInstanceRequestValidationError{
						field:  "Time",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateSetInExerciseInstanceRequestValidationError{
						field:  "Time",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateSetInExerciseInstanceRequestValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateSetInExerciseInstanceRequestMultiError(errors)
	}

	return nil
}

// UpdateSetInExerciseInstanceRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateSetInExerciseInstanceRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateSetInExerciseInstanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSetInExerciseInstanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSetInExerciseInstanceRequestMultiError) AllErrors() []error { return m }

// UpdateSetInExerciseInstanceRequestValidationError is the validation error
// returned by UpdateSetInExerciseInstanceRequest.Validate if the designated
// constraints aren't met.
type UpdateSetInExerciseInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSetInExerciseInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSetInExerciseInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSetInExerciseInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSetInExerciseInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSetInExerciseInstanceRequestValidationError) ErrorName() string {
	return "UpdateSetInExerciseInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSetInExerciseInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSetInExerciseInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSetInExerciseInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSetInExerciseInstanceRequestValidationError{}

// Validate checks the field values on RemoveSetFromExerciseInstanceRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RemoveSetFromExerciseInstanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveSetFromExerciseInstanceRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RemoveSetFromExerciseInstanceRequestMultiError, or nil if none found.
func (m *RemoveSetFromExerciseInstanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveSetFromExerciseInstanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoutineId

	// no validation rules for ExerciseInstanceId

	// no validation rules for SetId

	if len(errors) > 0 {
		return RemoveSetFromExerciseInstanceRequestMultiError(errors)
	}

	return nil
}

// RemoveSetFromExerciseInstanceRequestMultiError is an error wrapping multiple
// validation errors returned by
// RemoveSetFromExerciseInstanceRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveSetFromExerciseInstanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveSetFromExerciseInstanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveSetFromExerciseInstanceRequestMultiError) AllErrors() []error { return m }

// RemoveSetFromExerciseInstanceRequestValidationError is the validation error
// returned by RemoveSetFromExerciseInstanceRequest.Validate if the designated
// constraints aren't met.
type RemoveSetFromExerciseInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveSetFromExerciseInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveSetFromExerciseInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveSetFromExerciseInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveSetFromExerciseInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveSetFromExerciseInstanceRequestValidationError) ErrorName() string {
	return "RemoveSetFromExerciseInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveSetFromExerciseInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveSetFromExerciseInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveSetFromExerciseInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveSetFromExerciseInstanceRequestValidationError{}

// Validate checks the field values on SetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetResponseMultiError, or
// nil if none found.
func (m *SetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetResponseValidationError{
					field:  "Set",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetResponseValidationError{
					field:  "Set",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetResponseValidationError{
				field:  "Set",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetResponseMultiError(errors)
	}

	return nil
}

// SetResponseMultiError is an error wrapping multiple validation errors
// returned by SetResponse.ValidateAll() if the designated constraints aren't met.
type SetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetResponseMultiError) AllErrors() []error { return m }

// SetResponseValidationError is the validation error returned by
// SetResponse.Validate if the designated constraints aren't met.
type SetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetResponseValidationError) ErrorName() string { return "SetResponseValidationError" }

// Error satisfies the builtin error interface
func (e SetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetResponseValidationError{}

// Validate checks the field values on SetExerciseOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetExerciseOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetExerciseOrderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetExerciseOrderRequestMultiError, or nil if none found.
func (m *SetExerciseOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetExerciseOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoutineId

	if len(errors) > 0 {
		return SetExerciseOrderRequestMultiError(errors)
	}

	return nil
}

// SetExerciseOrderRequestMultiError is an error wrapping multiple validation
// errors returned by SetExerciseOrderRequest.ValidateAll() if the designated
// constraints aren't met.
type SetExerciseOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetExerciseOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetExerciseOrderRequestMultiError) AllErrors() []error { return m }

// SetExerciseOrderRequestValidationError is the validation error returned by
// SetExerciseOrderRequest.Validate if the designated constraints aren't met.
type SetExerciseOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetExerciseOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetExerciseOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetExerciseOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetExerciseOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetExerciseOrderRequestValidationError) ErrorName() string {
	return "SetExerciseOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetExerciseOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetExerciseOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetExerciseOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetExerciseOrderRequestValidationError{}

// Validate checks the field values on StartWorkoutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartWorkoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartWorkoutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartWorkoutRequestMultiError, or nil if none found.
func (m *StartWorkoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartWorkoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.RoutineId != nil {
		// no validation rules for RoutineId
	}

	if len(errors) > 0 {
		return StartWorkoutRequestMultiError(errors)
	}

	return nil
}

// StartWorkoutRequestMultiError is an error wrapping multiple validation
// errors returned by StartWorkoutRequest.ValidateAll() if the designated
// constraints aren't met.
type StartWorkoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartWorkoutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartWorkoutRequestMultiError) AllErrors() []error { return m }

// StartWorkoutRequestValidationError is the validation error returned by
// StartWorkoutRequest.Validate if the designated constraints aren't met.
type StartWorkoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartWorkoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartWorkoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartWorkoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartWorkoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartWorkoutRequestValidationError) ErrorName() string {
	return "StartWorkoutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartWorkoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartWorkoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartWorkoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartWorkoutRequestValidationError{}

// Validate checks the field values on GetWorkoutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetWorkoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkoutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkoutRequestMultiError, or nil if none found.
func (m *GetWorkoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkoutId

	if len(errors) > 0 {
		return GetWorkoutRequestMultiError(errors)
	}

	return nil
}

// GetWorkoutRequestMultiError is an error wrapping multiple validation errors
// returned by GetWorkoutRequest.ValidateAll() if the designated constraints
// aren't met.
type GetWorkoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkoutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkoutRequestMultiError) AllErrors() []error { return m }

// GetWorkoutRequestValidationError is the validation error returned by
// GetWorkoutRequest.Validate if the designated constraints aren't met.
type GetWorkoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkoutRequestValidationError) ErrorName() string {
	return "GetWorkoutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkoutRequestValidationError{}

// Validate checks the field values on DeleteWorkoutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWorkoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWorkoutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWorkoutRequestMultiError, or nil if none found.
func (m *DeleteWorkoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWorkoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkoutId

	if len(errors) > 0 {
		return DeleteWorkoutRequestMultiError(errors)
	}

	return nil
}

// DeleteWorkoutRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteWorkoutRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteWorkoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWorkoutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWorkoutRequestMultiError) AllErrors() []error { return m }

// DeleteWorkoutRequestValidationError is the validation error returned by
// DeleteWorkoutRequest.Validate if the designated constraints aren't met.
type DeleteWorkoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWorkoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWorkoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWorkoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWorkoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWorkoutRequestValidationError) ErrorName() string {
	return "DeleteWorkoutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWorkoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWorkoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWorkoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWorkoutRequestValidationError{}

// Validate checks the field values on GetWorkoutsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkoutsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkoutsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkoutsRequestMultiError, or nil if none found.
func (m *GetWorkoutsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkoutsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetWorkoutsRequestMultiError(errors)
	}

	return nil
}

// GetWorkoutsRequestMultiError is an error wrapping multiple validation errors
// returned by GetWorkoutsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetWorkoutsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkoutsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkoutsRequestMultiError) AllErrors() []error { return m }

// GetWorkoutsRequestValidationError is the validation error returned by
// GetWorkoutsRequest.Validate if the designated constraints aren't met.
type GetWorkoutsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkoutsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkoutsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkoutsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkoutsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkoutsRequestValidationError) ErrorName() string {
	return "GetWorkoutsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkoutsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkoutsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkoutsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkoutsRequestValidationError{}

// Validate checks the field values on GetWorkoutsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkoutsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkoutsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkoutsResponseMultiError, or nil if none found.
func (m *GetWorkoutsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkoutsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWorkouts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetWorkoutsResponseValidationError{
						field:  fmt.Sprintf("Workouts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetWorkoutsResponseValidationError{
						field:  fmt.Sprintf("Workouts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetWorkoutsResponseValidationError{
					field:  fmt.Sprintf("Workouts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetWorkoutsResponseMultiError(errors)
	}

	return nil
}

// GetWorkoutsResponseMultiError is an error wrapping multiple validation
// errors returned by GetWorkoutsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetWorkoutsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkoutsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkoutsResponseMultiError) AllErrors() []error { return m }

// GetWorkoutsResponseValidationError is the validation error returned by
// GetWorkoutsResponse.Validate if the designated constraints aren't met.
type GetWorkoutsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkoutsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkoutsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkoutsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkoutsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkoutsResponseValidationError) ErrorName() string {
	return "GetWorkoutsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkoutsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkoutsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkoutsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkoutsResponseValidationError{}

// Validate checks the field values on WorkoutsListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkoutsListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkoutsListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkoutsListResponseMultiError, or nil if none found.
func (m *WorkoutsListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkoutsListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWorkouts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorkoutsListResponseValidationError{
						field:  fmt.Sprintf("Workouts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorkoutsListResponseValidationError{
						field:  fmt.Sprintf("Workouts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkoutsListResponseValidationError{
					field:  fmt.Sprintf("Workouts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WorkoutsListResponseMultiError(errors)
	}

	return nil
}

// WorkoutsListResponseMultiError is an error wrapping multiple validation
// errors returned by WorkoutsListResponse.ValidateAll() if the designated
// constraints aren't met.
type WorkoutsListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkoutsListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkoutsListResponseMultiError) AllErrors() []error { return m }

// WorkoutsListResponseValidationError is the validation error returned by
// WorkoutsListResponse.Validate if the designated constraints aren't met.
type WorkoutsListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkoutsListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkoutsListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkoutsListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkoutsListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkoutsListResponseValidationError) ErrorName() string {
	return "WorkoutsListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WorkoutsListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkoutsListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkoutsListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkoutsListResponseValidationError{}

// Validate checks the field values on ExerciseLogDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExerciseLogDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExerciseLogDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExerciseLogDetailsMultiError, or nil if none found.
func (m *ExerciseLogDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *ExerciseLogDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExerciseLog()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExerciseLogDetailsValidationError{
					field:  "ExerciseLog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExerciseLogDetailsValidationError{
					field:  "ExerciseLog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExerciseLog()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExerciseLogDetailsValidationError{
				field:  "ExerciseLog",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExercise()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExerciseLogDetailsValidationError{
					field:  "Exercise",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExerciseLogDetailsValidationError{
					field:  "Exercise",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExercise()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExerciseLogDetailsValidationError{
				field:  "Exercise",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSetLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExerciseLogDetailsValidationError{
						field:  fmt.Sprintf("SetLogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExerciseLogDetailsValidationError{
						field:  fmt.Sprintf("SetLogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExerciseLogDetailsValidationError{
					field:  fmt.Sprintf("SetLogs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetExpectedSets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExerciseLogDetailsValidationError{
						field:  fmt.Sprintf("ExpectedSets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExerciseLogDetailsValidationError{
						field:  fmt.Sprintf("ExpectedSets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExerciseLogDetailsValidationError{
					field:  fmt.Sprintf("ExpectedSets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ExerciseLogDetailsMultiError(errors)
	}

	return nil
}

// ExerciseLogDetailsMultiError is an error wrapping multiple validation errors
// returned by ExerciseLogDetails.ValidateAll() if the designated constraints
// aren't met.
type ExerciseLogDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExerciseLogDetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExerciseLogDetailsMultiError) AllErrors() []error { return m }

// ExerciseLogDetailsValidationError is the validation error returned by
// ExerciseLogDetails.Validate if the designated constraints aren't met.
type ExerciseLogDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExerciseLogDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExerciseLogDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExerciseLogDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExerciseLogDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExerciseLogDetailsValidationError) ErrorName() string {
	return "ExerciseLogDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e ExerciseLogDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExerciseLogDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExerciseLogDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExerciseLogDetailsValidationError{}

// Validate checks the field values on GetWorkoutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkoutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkoutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkoutResponseMultiError, or nil if none found.
func (m *GetWorkoutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkoutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWorkoutResponseValidationError{
					field:  "Workout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWorkoutResponseValidationError{
					field:  "Workout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWorkoutResponseValidationError{
				field:  "Workout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetExerciseLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetWorkoutResponseValidationError{
						field:  fmt.Sprintf("ExerciseLogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetWorkoutResponseValidationError{
						field:  fmt.Sprintf("ExerciseLogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetWorkoutResponseValidationError{
					field:  fmt.Sprintf("ExerciseLogs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetWorkoutResponseMultiError(errors)
	}

	return nil
}

// GetWorkoutResponseMultiError is an error wrapping multiple validation errors
// returned by GetWorkoutResponse.ValidateAll() if the designated constraints
// aren't met.
type GetWorkoutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkoutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkoutResponseMultiError) AllErrors() []error { return m }

// GetWorkoutResponseValidationError is the validation error returned by
// GetWorkoutResponse.Validate if the designated constraints aren't met.
type GetWorkoutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkoutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkoutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkoutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkoutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkoutResponseValidationError) ErrorName() string {
	return "GetWorkoutResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkoutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkoutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkoutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkoutResponseValidationError{}

// Validate checks the field values on LogExerciseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LogExerciseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogExerciseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LogExerciseRequestMultiError, or nil if none found.
func (m *LogExerciseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LogExerciseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkoutId

	// no validation rules for ExerciseId

	if len(errors) > 0 {
		return LogExerciseRequestMultiError(errors)
	}

	return nil
}

// LogExerciseRequestMultiError is an error wrapping multiple validation errors
// returned by LogExerciseRequest.ValidateAll() if the designated constraints
// aren't met.
type LogExerciseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogExerciseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogExerciseRequestMultiError) AllErrors() []error { return m }

// LogExerciseRequestValidationError is the validation error returned by
// LogExerciseRequest.Validate if the designated constraints aren't met.
type LogExerciseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogExerciseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogExerciseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogExerciseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogExerciseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogExerciseRequestValidationError) ErrorName() string {
	return "LogExerciseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LogExerciseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogExerciseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogExerciseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogExerciseRequestValidationError{}

// Validate checks the field values on GetExerciseLogDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetExerciseLogDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExerciseLogDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetExerciseLogDetailRequestMultiError, or nil if none found.
func (m *GetExerciseLogDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExerciseLogDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkoutId

	// no validation rules for ExerciseLogId

	if len(errors) > 0 {
		return GetExerciseLogDetailRequestMultiError(errors)
	}

	return nil
}

// GetExerciseLogDetailRequestMultiError is an error wrapping multiple
// validation errors returned by GetExerciseLogDetailRequest.ValidateAll() if
// the designated constraints aren't met.
type GetExerciseLogDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExerciseLogDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExerciseLogDetailRequestMultiError) AllErrors() []error { return m }

// GetExerciseLogDetailRequestValidationError is the validation error returned
// by GetExerciseLogDetailRequest.Validate if the designated constraints
// aren't met.
type GetExerciseLogDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExerciseLogDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExerciseLogDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExerciseLogDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExerciseLogDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExerciseLogDetailRequestValidationError) ErrorName() string {
	return "GetExerciseLogDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetExerciseLogDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExerciseLogDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExerciseLogDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExerciseLogDetailRequestValidationError{}

// Validate checks the field values on DeleteExerciseLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteExerciseLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteExerciseLogRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteExerciseLogRequestMultiError, or nil if none found.
func (m *DeleteExerciseLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteExerciseLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkoutId

	// no validation rules for ExerciseLogId

	if len(errors) > 0 {
		return DeleteExerciseLogRequestMultiError(errors)
	}

	return nil
}

// DeleteExerciseLogRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteExerciseLogRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteExerciseLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteExerciseLogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteExerciseLogRequestMultiError) AllErrors() []error { return m }

// DeleteExerciseLogRequestValidationError is the validation error returned by
// DeleteExerciseLogRequest.Validate if the designated constraints aren't met.
type DeleteExerciseLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteExerciseLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteExerciseLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteExerciseLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteExerciseLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteExerciseLogRequestValidationError) ErrorName() string {
	return "DeleteExerciseLogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteExerciseLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteExerciseLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteExerciseLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteExerciseLogRequestValidationError{}

// Validate checks the field values on AddPowerRatingToExerciseLogRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AddPowerRatingToExerciseLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPowerRatingToExerciseLogRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AddPowerRatingToExerciseLogRequestMultiError, or nil if none found.
func (m *AddPowerRatingToExerciseLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPowerRatingToExerciseLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkoutId

	// no validation rules for ExerciseLogId

	if val := m.GetPowerRating(); val < 0 || val > 10 {
		err := AddPowerRatingToExerciseLogRequestValidationError{
			field:  "PowerRating",
			reason: "value must be inside range [0, 10]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddPowerRatingToExerciseLogRequestMultiError(errors)
	}

	return nil
}

// AddPowerRatingToExerciseLogRequestMultiError is an error wrapping multiple
// validation errors returned by
// AddPowerRatingToExerciseLogRequest.ValidateAll() if the designated
// constraints aren't met.
type AddPowerRatingToExerciseLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPowerRatingToExerciseLogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPowerRatingToExerciseLogRequestMultiError) AllErrors() []error { return m }

// AddPowerRatingToExerciseLogRequestValidationError is the validation error
// returned by AddPowerRatingToExerciseLogRequest.Validate if the designated
// constraints aren't met.
type AddPowerRatingToExerciseLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPowerRatingToExerciseLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPowerRatingToExerciseLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPowerRatingToExerciseLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPowerRatingToExerciseLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPowerRatingToExerciseLogRequestValidationError) ErrorName() string {
	return "AddPowerRatingToExerciseLogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddPowerRatingToExerciseLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPowerRatingToExerciseLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPowerRatingToExerciseLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPowerRatingToExerciseLogRequestValidationError{}

// Validate checks the field values on AddNotesToExerciseLogRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddNotesToExerciseLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddNotesToExerciseLogRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddNotesToExerciseLogRequestMultiError, or nil if none found.
func (m *AddNotesToExerciseLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddNotesToExerciseLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkoutId

	// no validation rules for ExerciseLogId

	// no validation rules for Notes

	if len(errors) > 0 {
		return AddNotesToExerciseLogRequestMultiError(errors)
	}

	return nil
}

// AddNotesToExerciseLogRequestMultiError is an error wrapping multiple
// validation errors returned by AddNotesToExerciseLogRequest.ValidateAll() if
// the designated constraints aren't met.
type AddNotesToExerciseLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddNotesToExerciseLogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddNotesToExerciseLogRequestMultiError) AllErrors() []error { return m }

// AddNotesToExerciseLogRequestValidationError is the validation error returned
// by AddNotesToExerciseLogRequest.Validate if the designated constraints
// aren't met.
type AddNotesToExerciseLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddNotesToExerciseLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddNotesToExerciseLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddNotesToExerciseLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddNotesToExerciseLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddNotesToExerciseLogRequestValidationError) ErrorName() string {
	return "AddNotesToExerciseLogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddNotesToExerciseLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddNotesToExerciseLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddNotesToExerciseLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddNotesToExerciseLogRequestValidationError{}

// Validate checks the field values on LogSetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogSetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogSetRequestMultiError, or
// nil if none found.
func (m *LogSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LogSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkoutId

	// no validation rules for ExerciseLogId

	if m.GetReps() <= 0 {
		err := LogSetRequestValidationError{
			field:  "Reps",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWeight() < 0 {
		err := LogSetRequestValidationError{
			field:  "Weight",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogSetRequestValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogSetRequestValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogSetRequestValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LogSetRequestMultiError(errors)
	}

	return nil
}

// LogSetRequestMultiError is an error wrapping multiple validation errors
// returned by LogSetRequest.ValidateAll() if the designated constraints
// aren't met.
type LogSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogSetRequestMultiError) AllErrors() []error { return m }

// LogSetRequestValidationError is the validation error returned by
// LogSetRequest.Validate if the designated constraints aren't met.
type LogSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogSetRequestValidationError) ErrorName() string { return "LogSetRequestValidationError" }

// Error satisfies the builtin error interface
func (e LogSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogSetRequestValidationError{}

// Validate checks the field values on UpdateSetLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSetLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSetLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSetLogRequestMultiError, or nil if none found.
func (m *UpdateSetLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSetLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkoutId

	// no validation rules for ExerciseLogId

	// no validation rules for SetId

	if m.SetType != nil {
		// no validation rules for SetType
	}

	if m.Reps != nil {

		if m.GetReps() <= 0 {
			err := UpdateSetLogRequestValidationError{
				field:  "Reps",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Weight != nil {

		if m.GetWeight() < 0 {
			err := UpdateSetLogRequestValidationError{
				field:  "Weight",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Time != nil {

		if all {
			switch v := interface{}(m.GetTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateSetLogRequestValidationError{
						field:  "Time",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateSetLogRequestValidationError{
						field:  "Time",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateSetLogRequestValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateSetLogRequestMultiError(errors)
	}

	return nil
}

// UpdateSetLogRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateSetLogRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateSetLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSetLogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSetLogRequestMultiError) AllErrors() []error { return m }

// UpdateSetLogRequestValidationError is the validation error returned by
// UpdateSetLogRequest.Validate if the designated constraints aren't met.
type UpdateSetLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSetLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSetLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSetLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSetLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSetLogRequestValidationError) ErrorName() string {
	return "UpdateSetLogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSetLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSetLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSetLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSetLogRequestValidationError{}

// Validate checks the field values on DeleteSetLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSetLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSetLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSetLogRequestMultiError, or nil if none found.
func (m *DeleteSetLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSetLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkoutId

	// no validation rules for ExerciseLogId

	// no validation rules for SetId

	if len(errors) > 0 {
		return DeleteSetLogRequestMultiError(errors)
	}

	return nil
}

// DeleteSetLogRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteSetLogRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteSetLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSetLogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSetLogRequestMultiError) AllErrors() []error { return m }

// DeleteSetLogRequestValidationError is the validation error returned by
// DeleteSetLogRequest.Validate if the designated constraints aren't met.
type DeleteSetLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSetLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSetLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSetLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSetLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSetLogRequestValidationError) ErrorName() string {
	return "DeleteSetLogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSetLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSetLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSetLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSetLogRequestValidationError{}

// Validate checks the field values on CompleteWorkoutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompleteWorkoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteWorkoutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompleteWorkoutRequestMultiError, or nil if none found.
func (m *CompleteWorkoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteWorkoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkoutId

	if len(errors) > 0 {
		return CompleteWorkoutRequestMultiError(errors)
	}

	return nil
}

// CompleteWorkoutRequestMultiError is an error wrapping multiple validation
// errors returned by CompleteWorkoutRequest.ValidateAll() if the designated
// constraints aren't met.
type CompleteWorkoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteWorkoutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteWorkoutRequestMultiError) AllErrors() []error { return m }

// CompleteWorkoutRequestValidationError is the validation error returned by
// CompleteWorkoutRequest.Validate if the designated constraints aren't met.
type CompleteWorkoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteWorkoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteWorkoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteWorkoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteWorkoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteWorkoutRequestValidationError) ErrorName() string {
	return "CompleteWorkoutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteWorkoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteWorkoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteWorkoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteWorkoutRequestValidationError{}

// Validate checks the field values on GetWorkoutReportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkoutReportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkoutReportRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkoutReportRequestMultiError, or nil if none found.
func (m *GetWorkoutReportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkoutReportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkoutId

	if len(errors) > 0 {
		return GetWorkoutReportRequestMultiError(errors)
	}

	return nil
}

// GetWorkoutReportRequestMultiError is an error wrapping multiple validation
// errors returned by GetWorkoutReportRequest.ValidateAll() if the designated
// constraints aren't met.
type GetWorkoutReportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkoutReportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkoutReportRequestMultiError) AllErrors() []error { return m }

// GetWorkoutReportRequestValidationError is the validation error returned by
// GetWorkoutReportRequest.Validate if the designated constraints aren't met.
type GetWorkoutReportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkoutReportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkoutReportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkoutReportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkoutReportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkoutReportRequestValidationError) ErrorName() string {
	return "GetWorkoutReportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkoutReportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkoutReportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkoutReportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkoutReportRequestValidationError{}

// Validate checks the field values on ExerciseLogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExerciseLogResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExerciseLogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExerciseLogResponseMultiError, or nil if none found.
func (m *ExerciseLogResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExerciseLogResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExerciseLogDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExerciseLogResponseValidationError{
					field:  "ExerciseLogDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExerciseLogResponseValidationError{
					field:  "ExerciseLogDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExerciseLogDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExerciseLogResponseValidationError{
				field:  "ExerciseLogDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExerciseLogResponseMultiError(errors)
	}

	return nil
}

// ExerciseLogResponseMultiError is an error wrapping multiple validation
// errors returned by ExerciseLogResponse.ValidateAll() if the designated
// constraints aren't met.
type ExerciseLogResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExerciseLogResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExerciseLogResponseMultiError) AllErrors() []error { return m }

// ExerciseLogResponseValidationError is the validation error returned by
// ExerciseLogResponse.Validate if the designated constraints aren't met.
type ExerciseLogResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExerciseLogResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExerciseLogResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExerciseLogResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExerciseLogResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExerciseLogResponseValidationError) ErrorName() string {
	return "ExerciseLogResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExerciseLogResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExerciseLogResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExerciseLogResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExerciseLogResponseValidationError{}

// Validate checks the field values on SetLogResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetLogResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetLogResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetLogResponseMultiError,
// or nil if none found.
func (m *SetLogResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetLogResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSetLog()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetLogResponseValidationError{
					field:  "SetLog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetLogResponseValidationError{
					field:  "SetLog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSetLog()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetLogResponseValidationError{
				field:  "SetLog",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetLogResponseMultiError(errors)
	}

	return nil
}

// SetLogResponseMultiError is an error wrapping multiple validation errors
// returned by SetLogResponse.ValidateAll() if the designated constraints
// aren't met.
type SetLogResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetLogResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetLogResponseMultiError) AllErrors() []error { return m }

// SetLogResponseValidationError is the validation error returned by
// SetLogResponse.Validate if the designated constraints aren't met.
type SetLogResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetLogResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetLogResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetLogResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetLogResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetLogResponseValidationError) ErrorName() string { return "SetLogResponseValidationError" }

// Error satisfies the builtin error interface
func (e SetLogResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetLogResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetLogResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetLogResponseValidationError{}

// Validate checks the field values on WorkoutResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WorkoutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkoutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkoutResponseMultiError, or nil if none found.
func (m *WorkoutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkoutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkoutResponseValidationError{
					field:  "Workout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkoutResponseValidationError{
					field:  "Workout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkoutResponseValidationError{
				field:  "Workout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkoutResponseMultiError(errors)
	}

	return nil
}

// WorkoutResponseMultiError is an error wrapping multiple validation errors
// returned by WorkoutResponse.ValidateAll() if the designated constraints
// aren't met.
type WorkoutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkoutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkoutResponseMultiError) AllErrors() []error { return m }

// WorkoutResponseValidationError is the validation error returned by
// WorkoutResponse.Validate if the designated constraints aren't met.
type WorkoutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkoutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkoutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkoutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkoutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkoutResponseValidationError) ErrorName() string { return "WorkoutResponseValidationError" }

// Error satisfies the builtin error interface
func (e WorkoutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkoutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkoutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkoutResponseValidationError{}

// Validate checks the field values on WorkoutReportResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkoutReportResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkoutReportResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkoutReportResponseMultiError, or nil if none found.
func (m *WorkoutReportResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkoutReportResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkoutReportResponseValidationError{
					field:  "Workout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkoutReportResponseValidationError{
					field:  "Workout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkoutReportResponseValidationError{
				field:  "Workout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetExerciseLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorkoutReportResponseValidationError{
						field:  fmt.Sprintf("ExerciseLogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorkoutReportResponseValidationError{
						field:  fmt.Sprintf("ExerciseLogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkoutReportResponseValidationError{
					field:  fmt.Sprintf("ExerciseLogs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetAdditionalInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkoutReportResponseValidationError{
					field:  "AdditionalInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkoutReportResponseValidationError{
					field:  "AdditionalInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAdditionalInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkoutReportResponseValidationError{
				field:  "AdditionalInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkoutReportResponseMultiError(errors)
	}

	return nil
}

// WorkoutReportResponseMultiError is an error wrapping multiple validation
// errors returned by WorkoutReportResponse.ValidateAll() if the designated
// constraints aren't met.
type WorkoutReportResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkoutReportResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkoutReportResponseMultiError) AllErrors() []error { return m }

// WorkoutReportResponseValidationError is the validation error returned by
// WorkoutReportResponse.Validate if the designated constraints aren't met.
type WorkoutReportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkoutReportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkoutReportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkoutReportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkoutReportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkoutReportResponseValidationError) ErrorName() string {
	return "WorkoutReportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WorkoutReportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkoutReportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkoutReportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkoutReportResponseValidationError{}

// Validate checks the field values on RateWorkoutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RateWorkoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RateWorkoutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RateWorkoutRequestMultiError, or nil if none found.
func (m *RateWorkoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RateWorkoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkoutId

	if val := m.GetRating(); val < 0 || val > 5 {
		err := RateWorkoutRequestValidationError{
			field:  "Rating",
			reason: "value must be inside range [0, 5]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RateWorkoutRequestMultiError(errors)
	}

	return nil
}

// RateWorkoutRequestMultiError is an error wrapping multiple validation errors
// returned by RateWorkoutRequest.ValidateAll() if the designated constraints
// aren't met.
type RateWorkoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RateWorkoutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RateWorkoutRequestMultiError) AllErrors() []error { return m }

// RateWorkoutRequestValidationError is the validation error returned by
// RateWorkoutRequest.Validate if the designated constraints aren't met.
type RateWorkoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RateWorkoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RateWorkoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RateWorkoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RateWorkoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RateWorkoutRequestValidationError) ErrorName() string {
	return "RateWorkoutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RateWorkoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRateWorkoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RateWorkoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RateWorkoutRequestValidationError{}

// Validate checks the field values on AddCommentToWorkoutRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddCommentToWorkoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCommentToWorkoutRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddCommentToWorkoutRequestMultiError, or nil if none found.
func (m *AddCommentToWorkoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCommentToWorkoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkoutId

	// no validation rules for Comment

	if len(errors) > 0 {
		return AddCommentToWorkoutRequestMultiError(errors)
	}

	return nil
}

// AddCommentToWorkoutRequestMultiError is an error wrapping multiple
// validation errors returned by AddCommentToWorkoutRequest.ValidateAll() if
// the designated constraints aren't met.
type AddCommentToWorkoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCommentToWorkoutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCommentToWorkoutRequestMultiError) AllErrors() []error { return m }

// AddCommentToWorkoutRequestValidationError is the validation error returned
// by AddCommentToWorkoutRequest.Validate if the designated constraints aren't met.
type AddCommentToWorkoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCommentToWorkoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCommentToWorkoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCommentToWorkoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCommentToWorkoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCommentToWorkoutRequestValidationError) ErrorName() string {
	return "AddCommentToWorkoutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddCommentToWorkoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCommentToWorkoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCommentToWorkoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCommentToWorkoutRequestValidationError{}

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRequestMultiError, or nil if none found.
func (m *CreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = CreateUserRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 8 {
		err := CreateUserRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 8 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.FirstName != nil {
		// no validation rules for FirstName
	}

	if m.LastName != nil {
		// no validation rules for LastName
	}

	if m.DateOfBirth != nil {

		if all {
			switch v := interface{}(m.GetDateOfBirth()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateUserRequestValidationError{
						field:  "DateOfBirth",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateUserRequestValidationError{
						field:  "DateOfBirth",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDateOfBirth()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateUserRequestValidationError{
					field:  "DateOfBirth",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Height != nil {

		if m.GetHeight() <= 0 {
			err := CreateUserRequestValidationError{
				field:  "Height",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Weight != nil {

		if m.GetWeight() <= 0 {
			err := CreateUserRequestValidationError{
				field:  "Weight",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CreateUserRequestMultiError(errors)
	}

	return nil
}

func (m *CreateUserRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CreateUserRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CreateUserRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRequestMultiError) AllErrors() []error { return m }

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRequestMultiError, or nil if none found.
func (m *UpdateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.FirstName != nil {

		if utf8.RuneCountInString(m.GetFirstName()) < 1 {
			err := UpdateUserRequestValidationError{
				field:  "FirstName",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.LastName != nil {

		if utf8.RuneCountInString(m.GetLastName()) < 1 {
			err := UpdateUserRequestValidationError{
				field:  "LastName",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.DateOfBirth != nil {

		if all {
			switch v := interface{}(m.GetDateOfBirth()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateUserRequestValidationError{
						field:  "DateOfBirth",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateUserRequestValidationError{
						field:  "DateOfBirth",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDateOfBirth()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateUserRequestValidationError{
					field:  "DateOfBirth",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Height != nil {

		if m.GetHeight() <= 0 {
			err := UpdateUserRequestValidationError{
				field:  "Height",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Weight != nil {

		if m.GetWeight() <= 0 {
			err := UpdateUserRequestValidationError{
				field:  "Weight",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.ProfilePictureUrl != nil {

		if uri, err := url.Parse(m.GetProfilePictureUrl()); err != nil {
			err = UpdateUserRequestValidationError{
				field:  "ProfilePictureUrl",
				reason: "value must be a valid URI",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else if !uri.IsAbs() {
			err := UpdateUserRequestValidationError{
				field:  "ProfilePictureUrl",
				reason: "value must be absolute",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateUserRequestMultiError(errors)
	}

	return nil
}

// UpdateUserRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRequestMultiError) AllErrors() []error { return m }

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on DeleteUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserRequestMultiError, or nil if none found.
func (m *DeleteUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return DeleteUserRequestMultiError(errors)
	}

	return nil
}

// DeleteUserRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteUserRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserRequestMultiError) AllErrors() []error { return m }

// DeleteUserRequestValidationError is the validation error returned by
// DeleteUserRequest.Validate if the designated constraints aren't met.
type DeleteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRequestValidationError) ErrorName() string {
	return "DeleteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRequestValidationError{}

// Validate checks the field values on UserResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserResponseMultiError, or
// nil if none found.
func (m *UserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserResponseMultiError(errors)
	}

	return nil
}

// UserResponseMultiError is an error wrapping multiple validation errors
// returned by UserResponse.ValidateAll() if the designated constraints aren't met.
type UserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserResponseMultiError) AllErrors() []error { return m }

// UserResponseValidationError is the validation error returned by
// UserResponse.Validate if the designated constraints aren't met.
type UserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserResponseValidationError) ErrorName() string { return "UserResponseValidationError" }

// Error satisfies the builtin error interface
func (e UserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserResponseValidationError{}

// Validate checks the field values on TokensPair with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TokensPair) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokensPair with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TokensPairMultiError, or
// nil if none found.
func (m *TokensPair) ValidateAll() error {
	return m.validate(true)
}

func (m *TokensPair) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return TokensPairMultiError(errors)
	}

	return nil
}

// TokensPairMultiError is an error wrapping multiple validation errors
// returned by TokensPair.ValidateAll() if the designated constraints aren't met.
type TokensPairMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokensPairMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokensPairMultiError) AllErrors() []error { return m }

// TokensPairValidationError is the validation error returned by
// TokensPair.Validate if the designated constraints aren't met.
type TokensPairValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokensPairValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokensPairValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokensPairValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokensPairValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokensPairValidationError) ErrorName() string { return "TokensPairValidationError" }

// Error satisfies the builtin error interface
func (e TokensPairValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokensPair.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokensPairValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokensPairValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResponseMultiError, or
// nil if none found.
func (m *LoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTokens()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginResponseValidationError{
					field:  "Tokens",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginResponseValidationError{
					field:  "Tokens",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTokens()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginResponseValidationError{
				field:  "Tokens",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoginResponseMultiError(errors)
	}

	return nil
}

// LoginResponseMultiError is an error wrapping multiple validation errors
// returned by LoginResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseMultiError) AllErrors() []error { return m }

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on RefreshRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RefreshRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RefreshRequestMultiError,
// or nil if none found.
func (m *RefreshRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTokens()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RefreshRequestValidationError{
					field:  "Tokens",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RefreshRequestValidationError{
					field:  "Tokens",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTokens()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RefreshRequestValidationError{
				field:  "Tokens",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RefreshRequestMultiError(errors)
	}

	return nil
}

// RefreshRequestMultiError is an error wrapping multiple validation errors
// returned by RefreshRequest.ValidateAll() if the designated constraints
// aren't met.
type RefreshRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshRequestMultiError) AllErrors() []error { return m }

// RefreshRequestValidationError is the validation error returned by
// RefreshRequest.Validate if the designated constraints aren't met.
type RefreshRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshRequestValidationError) ErrorName() string { return "RefreshRequestValidationError" }

// Error satisfies the builtin error interface
func (e RefreshRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshRequestValidationError{}

// Validate checks the field values on RefreshResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RefreshResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshResponseMultiError, or nil if none found.
func (m *RefreshResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTokens()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RefreshResponseValidationError{
					field:  "Tokens",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RefreshResponseValidationError{
					field:  "Tokens",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTokens()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RefreshResponseValidationError{
				field:  "Tokens",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RefreshResponseMultiError(errors)
	}

	return nil
}

// RefreshResponseMultiError is an error wrapping multiple validation errors
// returned by RefreshResponse.ValidateAll() if the designated constraints
// aren't met.
type RefreshResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshResponseMultiError) AllErrors() []error { return m }

// RefreshResponseValidationError is the validation error returned by
// RefreshResponse.Validate if the designated constraints aren't met.
type RefreshResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshResponseValidationError) ErrorName() string { return "RefreshResponseValidationError" }

// Error satisfies the builtin error interface
func (e RefreshResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshResponseValidationError{}

// Validate checks the field values on LogoutRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutRequestMultiError, or
// nil if none found.
func (m *LogoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return LogoutRequestMultiError(errors)
	}

	return nil
}

// LogoutRequestMultiError is an error wrapping multiple validation errors
// returned by LogoutRequest.ValidateAll() if the designated constraints
// aren't met.
type LogoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutRequestMultiError) AllErrors() []error { return m }

// LogoutRequestValidationError is the validation error returned by
// LogoutRequest.Validate if the designated constraints aren't met.
type LogoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutRequestValidationError) ErrorName() string { return "LogoutRequestValidationError" }

// Error satisfies the builtin error interface
func (e LogoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutRequestValidationError{}

// Validate checks the field values on PresignUploadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PresignUploadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PresignUploadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PresignUploadRequestMultiError, or nil if none found.
func (m *PresignUploadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PresignUploadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Filename

	// no validation rules for ContentType

	if len(errors) > 0 {
		return PresignUploadRequestMultiError(errors)
	}

	return nil
}

// PresignUploadRequestMultiError is an error wrapping multiple validation
// errors returned by PresignUploadRequest.ValidateAll() if the designated
// constraints aren't met.
type PresignUploadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PresignUploadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PresignUploadRequestMultiError) AllErrors() []error { return m }

// PresignUploadRequestValidationError is the validation error returned by
// PresignUploadRequest.Validate if the designated constraints aren't met.
type PresignUploadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PresignUploadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PresignUploadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PresignUploadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PresignUploadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PresignUploadRequestValidationError) ErrorName() string {
	return "PresignUploadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PresignUploadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPresignUploadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PresignUploadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PresignUploadRequestValidationError{}

// Validate checks the field values on PresignUploadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PresignUploadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PresignUploadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PresignUploadResponseMultiError, or nil if none found.
func (m *PresignUploadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PresignUploadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UploadUrl

	// no validation rules for GetUrl

	if len(errors) > 0 {
		return PresignUploadResponseMultiError(errors)
	}

	return nil
}

// PresignUploadResponseMultiError is an error wrapping multiple validation
// errors returned by PresignUploadResponse.ValidateAll() if the designated
// constraints aren't met.
type PresignUploadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PresignUploadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PresignUploadResponseMultiError) AllErrors() []error { return m }

// PresignUploadResponseValidationError is the validation error returned by
// PresignUploadResponse.Validate if the designated constraints aren't met.
type PresignUploadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PresignUploadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PresignUploadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PresignUploadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PresignUploadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PresignUploadResponseValidationError) ErrorName() string {
	return "PresignUploadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PresignUploadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPresignUploadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PresignUploadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PresignUploadResponseValidationError{}

// Validate checks the field values on GetWorkoutsResponse_WorkoutDetails with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetWorkoutsResponse_WorkoutDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkoutsResponse_WorkoutDetails
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetWorkoutsResponse_WorkoutDetailsMultiError, or nil if none found.
func (m *GetWorkoutsResponse_WorkoutDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkoutsResponse_WorkoutDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWorkoutsResponse_WorkoutDetailsValidationError{
					field:  "Workout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWorkoutsResponse_WorkoutDetailsValidationError{
					field:  "Workout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWorkoutsResponse_WorkoutDetailsValidationError{
				field:  "Workout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetExerciseLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetWorkoutsResponse_WorkoutDetailsValidationError{
						field:  fmt.Sprintf("ExerciseLogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetWorkoutsResponse_WorkoutDetailsValidationError{
						field:  fmt.Sprintf("ExerciseLogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetWorkoutsResponse_WorkoutDetailsValidationError{
					field:  fmt.Sprintf("ExerciseLogs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetWorkoutsResponse_WorkoutDetailsMultiError(errors)
	}

	return nil
}

// GetWorkoutsResponse_WorkoutDetailsMultiError is an error wrapping multiple
// validation errors returned by
// GetWorkoutsResponse_WorkoutDetails.ValidateAll() if the designated
// constraints aren't met.
type GetWorkoutsResponse_WorkoutDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkoutsResponse_WorkoutDetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkoutsResponse_WorkoutDetailsMultiError) AllErrors() []error { return m }

// GetWorkoutsResponse_WorkoutDetailsValidationError is the validation error
// returned by GetWorkoutsResponse_WorkoutDetails.Validate if the designated
// constraints aren't met.
type GetWorkoutsResponse_WorkoutDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkoutsResponse_WorkoutDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkoutsResponse_WorkoutDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkoutsResponse_WorkoutDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkoutsResponse_WorkoutDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkoutsResponse_WorkoutDetailsValidationError) ErrorName() string {
	return "GetWorkoutsResponse_WorkoutDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkoutsResponse_WorkoutDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkoutsResponse_WorkoutDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkoutsResponse_WorkoutDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkoutsResponse_WorkoutDetailsValidationError{}

// Validate checks the field values on WorkoutReportResponse_AdditionalInfo
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *WorkoutReportResponse_AdditionalInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkoutReportResponse_AdditionalInfo
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// WorkoutReportResponse_AdditionalInfoMultiError, or nil if none found.
func (m *WorkoutReportResponse_AdditionalInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkoutReportResponse_AdditionalInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalSets

	// no validation rules for TotalReps

	// no validation rules for TotalWeight

	if all {
		switch v := interface{}(m.GetTotalTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkoutReportResponse_AdditionalInfoValidationError{
					field:  "TotalTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkoutReportResponse_AdditionalInfoValidationError{
					field:  "TotalTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTotalTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkoutReportResponse_AdditionalInfoValidationError{
				field:  "TotalTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkoutReportResponse_AdditionalInfoMultiError(errors)
	}

	return nil
}

// WorkoutReportResponse_AdditionalInfoMultiError is an error wrapping multiple
// validation errors returned by
// WorkoutReportResponse_AdditionalInfo.ValidateAll() if the designated
// constraints aren't met.
type WorkoutReportResponse_AdditionalInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkoutReportResponse_AdditionalInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkoutReportResponse_AdditionalInfoMultiError) AllErrors() []error { return m }

// WorkoutReportResponse_AdditionalInfoValidationError is the validation error
// returned by WorkoutReportResponse_AdditionalInfo.Validate if the designated
// constraints aren't met.
type WorkoutReportResponse_AdditionalInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkoutReportResponse_AdditionalInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkoutReportResponse_AdditionalInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkoutReportResponse_AdditionalInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkoutReportResponse_AdditionalInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkoutReportResponse_AdditionalInfoValidationError) ErrorName() string {
	return "WorkoutReportResponse_AdditionalInfoValidationError"
}

// Error satisfies the builtin error interface
func (e WorkoutReportResponse_AdditionalInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkoutReportResponse_AdditionalInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkoutReportResponse_AdditionalInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkoutReportResponse_AdditionalInfoValidationError{}
